#!/bin/sh

ACTION="$1"
MOUNTPOINT="$2"

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
INTERNALDIR="/srv/usb-rauc"

if [ "$ACTION" = "add" ]; then
	mkdir -p "$INTERNALDIR"
	rm -f $INTERNALDIR/*

	# obtain current platform info
	eval $(rauc status --output-format=shell 2>/dev/null)

	CANDIDATES="$(find "$MOUNTPOINT" -name *.image)"
	if [ -n "$CANDIDATES" ]; then
		# if we are running a system which was updated with rauc, we
		# can obtain sha256 sums from slot status files
		ROOTFS_DIGEST=$(awk -F "=" ' /^sha256/ {print $2}' /slot.raucs 2>/dev/null)
		CUSTOMERFS_DIGEST=$(awk -F "=" ' /^sha256/ {print $2}' /opt/slot.raucs 2>/dev/null)

		for x in $CANDIDATES; do
			BASENAME="$(basename $x .image)"
			BUNDLE="$INTERNALDIR/${BASENAME}.raucb"

			echo "considering $x" | logger -t usb-mount-rauc

			# obtain image info
			eval $(rauc info --no-verify --output-format=shell "$x" 2>/dev/null)

			# if it does not match our current platform, we ignore it
			if [ "$RAUC_SYSTEM_COMPATIBLE" != "$RAUC_MF_COMPATIBLE" ]; then
				echo "not compatible: '$RAUC_SYSTEM_COMPATIBLE' vs. '$RAUC_MF_COMPATIBLE'" | logger -t usb-mount-rauc
				continue
			fi

			# need to copy over since we must change filename extension
			cp "$x" "$BUNDLE"

			# loop through images in the bundle and determine whether it looks like this
			# is the bundle we are already running from
			for y in $(seq 0 $((RAUC_MF_IMAGES - 1))); do
				eval RAUC_IMAGE_CLASS=\$RAUC_IMAGE_CLASS_${y}
				eval RAUC_${RAUC_IMAGE_CLASS}_DIGEST=\$RAUC_IMAGE_DIGEST_${y}
			done

			if [ "$ROOTFS_DIGEST" = "$RAUC_rootfs_DIGEST" -a "$CUSTOMERFS_DIGEST" = "$RAUC_customerfs_DIGEST" ]; then
				# seems that this update was already processed in previous run, so skip it
				echo "already installed" | logger -t usb-mount-rauc
				rm -f "$BUNDLE"
				continue
			fi

			# try to install it and reboot on success
			echo "trying to install" | logger -t usb-mount-rauc
			rauc install "$BUNDLE" && reboot
		done
	fi
fi
